const mongoose = require('mongoose')

/*
 Will need to see how effective the parents property is. Might need to research this more
*/

const categorySchema = new mongoose.Schema({
    name: {
        type: String,
        maxlength: 50,
        required: true,
        trim: true
    },
    parent: {
        type: mongoose.Schema.Types.ObjectId,
        required: false,
        default: undefined,
        ref: 'Category'
    },
    path: {
        /*
       Ancestory path of the category e.g. [grandparent, parent, this] 
           - This will be autogenerated when the category is added based on the parent ID
           - This will be used for the URL, so needs to be unique - How to enforce this?
       */
        type: [String],
        unique: true,
        required: true,
        validate(value) {
            //Validate Category Depth - This will be hardcoded to 3 i.e Grandparent -> Parent -> Child
            if (value.length > 3) throw new Error('Category has to many parents! Categories may only be 3 levels deep!')
        }
    },
    url: {  //This will be the path formatted as URL Relative to /c. This could potentially be a virtual property
        type: String,
        required: false
    },
    children: [{ type: mongoose.Schema.Types.ObjectId, ref: 'Category' }]
}, {
    timestamps: true
})

// #### Category Methods ####

/*
    Find Children Categories. Does not have to be an immediate child. This is needed when deleting or updating a category
    Still need to test this!!
    */
categorySchema.methods.getChildren = async function () {
    //
}

// #### Category Static Methods ### //

/* 
Update the Children arrays of each category everytime there is a CRUD operation
*/
categorySchema.statics.updateChildren = async function () {

}



const Category = mongoose.model('Category', categorySchema)
module.exports = Category
